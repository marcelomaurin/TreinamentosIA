TipoSaida = 1  # 1 = GTTS, 2 = eSpeak
import mysql.connector
import pyttsx3
import subprocess
import tempfile
from gtts import gTTS
import openai
import speech_recognition as sr
import os
from collections import deque
from datetime import datetime

# Inicializa√ß√£o condicional para pyttsx3 se TipoSaida 2 ou 3 for usado
espeak_engine = None
if TipoSaida in [2, 3]:
    espeak_engine = pyttsx3.init()
    if TipoSaida == 2:
        espeak_engine.setProperty('voice', 'brazil')
    elif TipoSaida == 3:
        espeak_engine.setProperty('voice', 'mb-pt4')
    espeak_engine.setProperty('rate', 150)
    espeak_engine.setProperty('volume', 1.0)

# üíñ Sua chave da OpenAI
client = openai.OpenAI(api_key='sua-chave-aqui')

palavra_ativacao = "computador"
historico_completo = deque(maxlen=50)
buffer_resumido = deque(maxlen=10)

def salvar_analise_sentimento(id_pergunta, sentimento_detectado):
    """
    Recebe o texto do sentimento detectado e o ID da pergunta.
    Busca o ID do sentimento e salva na tabela analise_sentimentos.
    """
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco. An√°lise n√£o salva.")
        return

    try:
        cursor = conexao_mysql.cursor()

        # Buscar ID do sentimento
        cursor.execute("SELECT id FROM sentimentos WHERE texto = %s", (sentimento_detectado,))
        resultado = cursor.fetchone()

        if not resultado:
            print(f"‚ùå Sentimento '{sentimento_detectado}' n√£o encontrado no banco.")
            cursor.close()
            return

        id_sentimento = resultado[0]

        # Salvar na tabela de an√°lise
        cursor.execute("""
            INSERT INTO analise_sentimentos (id_pergunta, id_sentimento)
            VALUES (%s, %s)
        """, (id_pergunta, id_sentimento))

        conexao_mysql.commit()
        cursor.close()
        print(f"üß† An√°lise de sentimento salva com sucesso: Pergunta {id_pergunta} ‚Üí Sentimento '{sentimento_detectado}' (ID {id_sentimento})")

    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar an√°lise de sentimento: {e}")


def classificar_sentimento(pergunta):
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco.")
        return None

    try:
        # Buscar lista de sentimentos do banco
        cursor = conexao_mysql.cursor()
        cursor.execute("SELECT texto FROM sentimentos")
        sentimentos_lista = [row[0] for row in cursor.fetchall()]
        cursor.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao buscar sentimentos: {e}")
        return None

    prompt = (
        "Voc√™ √© um classificador de sentimentos. Abaixo est√° uma lista de sentimentos poss√≠veis:\n"
        f"{', '.join(sentimentos_lista)}.\n\n"
        f"Dada a frase: \"{pergunta}\"\n"
        "Indique **apenas o nome do sentimento** que mais representa essa frase, sem explica√ß√µes, sem pontua√ß√£o."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um classificador de sentimentos."},
                {"role": "user", "content": prompt}
            ]
        )
        sentimento = response.choices[0].message.content.strip().title()
        print(f"üí° Sentimento identificado: {sentimento}")
        return sentimento
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao classificar sentimento: {e}")
        return None

def buscar_id_sentimento(sentimento):
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco.")
        return None
    try:
        cursor = conexao_mysql.cursor()
        cursor.execute("SELECT id FROM sentimentos WHERE texto = %s", (sentimento,))
        resultado = cursor.fetchone()
        cursor.close()
        if resultado:
            print(f"üîé Sentimento '{sentimento}' tem ID {resultado[0]}")
            return resultado[0]
        else:
            print(f"‚ùå Sentimento '{sentimento}' n√£o encontrado no banco.")
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao buscar sentimento: {e}")
        return None
        
def classificar_idioma(texto):
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco.")
        return None

    try:
        # Buscar todos os idiomas da tabela
        cursor = conexao_mysql.cursor()
        cursor.execute("SELECT nome FROM idiomas")
        idiomas_lista = [row[0] for row in cursor.fetchall()]
        cursor.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao buscar idiomas: {e}")
        return None

    prompt = (
        "Voc√™ √© um classificador de idiomas. Abaixo est√° a lista de idiomas suportados:\n"
        f"{', '.join(idiomas_lista)}.\n\n"
        f"Dado o texto: \"{texto}\"\n"
        "Indique apenas o **nome do idioma** em que esse texto est√° escrito, sem explica√ß√µes e sem pontua√ß√£o."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um classificador de idiomas."},
                {"role": "user", "content": prompt}
            ]
        )
        idioma_detectado = response.choices[0].message.content.strip().title()
        print(f"üåç Idioma identificado: {idioma_detectado}")
        return idioma_detectado
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao classificar idioma: {e}")
        return None

def buscar_id_idioma(nome_idioma):
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco.")
        return None
    try:
        cursor = conexao_mysql.cursor()
        cursor.execute("SELECT id FROM idiomas WHERE nome = %s", (nome_idioma,))
        resultado = cursor.fetchone()
        cursor.close()
        if resultado:
            print(f"üîé Idioma '{nome_idioma}' tem ID {resultado[0]}")
            return resultado[0]
        else:
            print(f"‚ùå Idioma '{nome_idioma}' n√£o encontrado no banco.")
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao buscar idioma: {e}")
        return None

        
# Conex√£o com o MySQL (ajuste o host, user e password conforme necess√°rio)
try:
    conexao_mysql = mysql.connector.connect(
        host='localhost',
        user='usuario',
        password='senha',
        database='IAdb'
    )
    print("‚úÖ Conectado ao banco de dados IAdb")
except Exception as e:
    print(f"‚ùå Erro ao conectar no banco de dados: {e}")
    conexao_mysql = None
    
def gerar_subperguntas(id_pergunta, texto_pergunta):
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco.")
        return

    prompt = (
        "Voc√™ √© um assistente que ajuda a dividir instru√ß√µes em partes menores com sentido individual.\n"
        "Abaixo est√° uma frase, e sua tarefa √© separ√°-la em subfrases ou comandos curtos, cada um com sentido completo.\n"
        "Responda com uma lista simples, cada linha uma subpergunta.\n\n"
        f"Frase: \"{texto_pergunta}\"\n"
        "Subperguntas:"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ divide frases em partes menores com sentido independente."},
                {"role": "user", "content": prompt}
            ]
        )

        resposta = response.choices[0].message.content.strip()
        print("üì§ Subperguntas recebidas:\n", resposta)

        # Dividir por linhas
        subperguntas = [linha.strip("-‚Ä¢* ").strip() for linha in resposta.split("\n") if linha.strip()]
        
        cursor = conexao_mysql.cursor()
        for sub in subperguntas:
            cursor.execute(
                "INSERT INTO subpergunta (id_pergunta, texto, processado) VALUES (%s, %s, %s)",
                (id_pergunta, sub, 0)
            )
        conexao_mysql.commit()
        cursor.close()

        print(f"‚úÖ {len(subperguntas)} subpergunta(s) salvas com sucesso.")

    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao gerar ou salvar subperguntas: {e}")
    
    
def salvar_pergunta_mysql(pergunta, id_origem=1):  # padr√£o: voz
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco. Pergunta n√£o salva.")
        return None
    try:
        cursor = conexao_mysql.cursor()
        cursor.execute("INSERT INTO perguntas (texto, id_origem) VALUES (%s, %s)", (pergunta, id_origem))
        conexao_mysql.commit()
        id_inserido = cursor.lastrowid
        cursor.close()
        print(f"üíæ Pergunta salva no banco com ID {id_inserido}")
        return id_inserido
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar no banco: {e}")
        return None



def salvar_resposta_mysql(id_pergunta, resposta):
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco. Resposta n√£o salva.")
        return
    try:
        cursor = conexao_mysql.cursor()
        cursor.execute("INSERT INTO respostas (id_pergunta, texto) VALUES (%s, %s)", (id_pergunta, resposta))
        conexao_mysql.commit()
        cursor.close()
        print(f"üíæ Resposta salva no banco vinculada √† pergunta {id_pergunta}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar resposta: {e}")



def ouvir_microfone():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("\nüé§ Fale algo (aguardando)...")
        audio = r.listen(source)
    try:
        texto = r.recognize_google(audio, language='pt-BR')
        print(f"üìù Voc√™ disse: {texto}")
        return texto.lower()
    except sr.UnknownValueError:
        print("‚ùå N√£o entendi o que voc√™ disse.")
        return None
    except sr.RequestError as e:
        print("‚ö†Ô∏è Erro ao acessar o servi√ßo de reconhecimento:", e)
        return None

def verificar_se_e_continuacao(nova_pergunta):
    if not buffer_resumido:
        return False
    pergunta_anterior, _ = buffer_resumido[-1]
    prompt = (
        "Voc√™ √© um classificador. Responda apenas com 'Sim' ou 'N√£o'.\n"
        "Pergunta anterior:\n"
        f"{pergunta_anterior}\n\n"
        "Nova pergunta:\n"
        f"{nova_pergunta}\n\n"
        "A nova pergunta √© continua√ß√£o direta da anterior?"
    )
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um classificador. Responda apenas com 'Sim' ou 'N√£o'."},
                {"role": "user", "content": prompt}
            ]
        )
        resultado = response.choices[0].message.content.strip().lower()
        print(f"ü§ñ Classificador: {resultado}")
        return resultado.startswith("sim")
    except Exception as e:
        print("‚ö†Ô∏è Erro na verifica√ß√£o de continua√ß√£o:", e)
        return False
        
def analisa_subpergunta(subpergunta_texto):
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco.")
        return None

    try:
        # Buscar os tipos de opera√ß√£o do banco
        cursor = conexao_mysql.cursor()
        cursor.execute("SELECT texto FROM tipo_operacao")
        tipos_operacao = [row[0] for row in cursor.fetchall()]
        cursor.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao buscar tipos de opera√ß√£o: {e}")
        return None

    prompt = (
        "Voc√™ √© um classificador de opera√ß√£o. Abaixo est√° uma subpergunta de um usu√°rio.\n"
        "Seu objetivo √© classificar essa subpergunta com base na lista de opera√ß√µes abaixo:\n\n"
        f"{', '.join(tipos_operacao)}.\n\n"
        f"Subpergunta: \"{subpergunta_texto}\"\n"
        "Responda apenas com o nome exato da opera√ß√£o que mais se aplica. N√£o inclua explica√ß√µes ou pontua√ß√£o."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um classificador de tipo de opera√ß√£o."},
                {"role": "user", "content": prompt}
            ]
        )
        tipo_detectado = response.choices[0].message.content.strip().title()
        print(f"üîé Tipo de opera√ß√£o identificado: {tipo_detectado}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao classificar tipo de opera√ß√£o: {e}")
        return None

    # Buscar ID correspondente no banco
    try:
        cursor = conexao_mysql.cursor()
        cursor.execute("SELECT id FROM tipo_operacao WHERE texto = %s", (tipo_detectado,))
        resultado = cursor.fetchone()
        cursor.close()

        if resultado:
            return resultado[0]
        else:
            print(f"‚ùå Tipo de opera√ß√£o '{tipo_detectado}' n√£o encontrado no banco.")
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao buscar ID da opera√ß√£o: {e}")
        return None

def classificar_e_relacionar_tipo_operacao(id_pergunta):
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco.")
        return

    try:
        cursor = conexao_mysql.cursor()
        cursor.execute("SELECT id, texto FROM subpergunta WHERE id_pergunta = %s AND processado = 0", (id_pergunta,))
        subperguntas = cursor.fetchall()

        for sub_id, sub_texto in subperguntas:
            id_tipo = analisa_subpergunta(sub_texto)
            if id_tipo:
                print(f"üîó Subpergunta ID {sub_id} ‚Üí Tipo de opera√ß√£o ID {id_tipo}")
                cursor.execute("""
                    INSERT INTO subpergunta_operacao (id_subpergunta, id_tipo_operacao)
                    VALUES (%s, %s)
                """, (sub_id, id_tipo))
                cursor.execute("UPDATE subpergunta SET processado = 1 WHERE id = %s", (sub_id,))
            else:
                print(f"‚ùå N√£o foi poss√≠vel classificar subpergunta ID {sub_id}")

        conexao_mysql.commit()
        cursor.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao classificar e relacionar subperguntas: {e}")

def subpergunta_contem_tipo_pergunta(id_pergunta):
    if conexao_mysql is None:
        print("‚ö†Ô∏è Sem conex√£o com o banco.")
        return False
    try:
        cursor = conexao_mysql.cursor()
        cursor.execute("""
            SELECT 1
            FROM subpergunta_operacao so
            JOIN tipo_operacao t ON so.id_tipo_operacao = t.id
            JOIN subpergunta sp ON sp.id = so.id_subpergunta
            WHERE sp.id_pergunta = %s AND t.texto = 'Pergunta'
            LIMIT 1
        """, (id_pergunta,))
        resultado = cursor.fetchone()
        cursor.close()
        return resultado is not None
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao verificar tipo Pergunta: {e}")
        return False

        

def resumir_interacao(pergunta, resposta):
    mensagens = [{"role": "system", "content": "Resuma a pergunta e a resposta em uma √∫nica frase mantendo o contexto essencial. Seja claro, direto e mantenha as informa√ß√µes importantes."}]
    mensagens.append({"role": "user", "content": f"Pergunta: {pergunta}\nResposta: {resposta}"})
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=mensagens
        )
        resumo = response.choices[0].message.content.strip()
        print("üß† Resumo da intera√ß√£o:", resumo)
        buffer_resumido.clear()
        buffer_resumido.append((resumo, datetime.now()))
    except Exception as e:
        print("‚ö†Ô∏è Erro ao gerar o resumo da intera√ß√£o:", e)

def perguntar_chatgpt(pergunta):
    mensagens = [{
        "role": "system",
        "content": (
            "Voc√™ √© um assistente virtual inteligente, inspirado na assistente Sexta-feira (F.R.I.D.A.Y.) do Homem de Ferro.\n"
            "Suas respostas ser√£o lidas por um sintetizador de voz (Google Speech), ent√£o escreva com clareza, ritmo e naturalidade.\n"
            "Use frases curtas e objetivas. Separe ideias com v√≠rgulas, pontos e retic√™ncias para marcar pausas naturais.\n"
            "Evite interjei√ß√µes como 'Ah!', 'Hmm', etc., pois elas n√£o s√£o bem interpretadas.\n"
            "Evite frases longas. Prefira linguagem direta, sem floreios.\n"
            "A entona√ß√£o deve surgir da pontua√ß√£o: v√≠rgulas para pausas curtas, pontos para encerramento, retic√™ncias para continuidade."
        )
    }]
    for entrada, _ in buffer_resumido:
        mensagens.append({"role": "user", "content": entrada})
    mensagens.append({"role": "user", "content": pergunta})

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=mensagens
        )
        resposta = response.choices[0].message.content.strip()
        print("ü§ñ ChatGPT:", resposta)
        return resposta
    except Exception as e:
        print("‚ö†Ô∏è Erro na API:", e)
        return "Desculpe, houve um erro ao consultar o sistema."

def falar_resposta(resposta):
    print("üó£Ô∏è Falando com carinho...")
    if TipoSaida == 1:
        tts = gTTS(text=resposta, lang='pt-br')
        with tempfile.NamedTemporaryFile(delete=True, suffix=".mp3") as fp:
            tts.save(fp.name)
            os.system(f"mpg123 -a default -q {fp.name}")
    elif TipoSaida in [2, 3]:
        espeak_engine.say(resposta)
        espeak_engine.runAndWait()
    else:
        print("‚ö†Ô∏è Tipo de sa√≠da de voz n√£o suportado.")

def assistente_loop():
    print("üí¨ Assistente iniciado! Diga 'computador' para come√ßar um novo assunto.")
    while True:
        texto = ouvir_microfone()
        if texto is None:
            continue

        agora = datetime.now()
        nova_pergunta = texto.strip()
        historico_completo.append((nova_pergunta, agora))
        id_pergunta = salvar_pergunta_mysql(nova_pergunta, id_origem=1)


        tempo_expirado = True
        if buffer_resumido:
            _, ultima_data = buffer_resumido[-1]
            segundos = (agora - ultima_data).total_seconds()
            tempo_expirado = segundos > 120

        precisa_ativacao = not buffer_resumido or tempo_expirado

        if precisa_ativacao:
            if palavra_ativacao in nova_pergunta:
                historico_completo.clear()
                buffer_resumido.clear()
                nova_pergunta = nova_pergunta.replace(palavra_ativacao, '').strip()
                historico_completo.append((nova_pergunta, agora))
            else:
                print("‚õî Pergunta ignorada: √© um novo assunto e a palavra de ativa√ß√£o n√£o foi usada.")
                continue
        else:
            nova_pergunta = nova_pergunta.replace(palavra_ativacao, '').strip()
            if verificar_se_e_continuacao(nova_pergunta):
                historico_completo.append((nova_pergunta, agora))
            else:
                if palavra_ativacao in texto:
                    historico_completo.clear()
                    buffer_resumido.clear()
                    nova_pergunta = nova_pergunta.replace(palavra_ativacao, '').strip()
                    historico_completo.append((nova_pergunta, agora))
                else:
                    print("‚õî Pergunta ignorada: n√£o √© continua√ß√£o e a palavra de ativa√ß√£o n√£o foi usada.")
                    continue

        resposta = perguntar_chatgpt(nova_pergunta)
        if subpergunta_contem_tipo_pergunta(id_pergunta):
            falar_resposta(resposta)
        else:
            print("ü§ê Resposta n√£o falada: n√£o √© do tipo 'Pergunta'."

        if id_pergunta:
            salvar_resposta_mysql(id_pergunta, resposta)

            sentimento_detectado = classificar_sentimento(nova_pergunta)
            if sentimento_detectado:
              salvar_analise_sentimento(id_pergunta, sentimento_detectado)
            idioma_detectado = classificar_idioma(nova_pergunta)
            if idioma_detectado:
              id_idioma = buscar_id_idioma(idioma_detectado)
              
            # Cria subperguntas e classifica tipo de opera√ß√£o
            gerar_subperguntas(id_pergunta, nova_pergunta)
            classificar_e_relacionar_tipo_operacao(id_pergunta)
       




        falar_resposta(resposta)
        historico_completo.append((resposta, datetime.now()))
        resumir_interacao(nova_pergunta, resposta)

        print("\nüìú Hist√≥rico atualizado:")
        for i, (p, d) in enumerate(historico_completo, 1):
            print(f"{i:02d}. {p} ({d.strftime('%H:%M:%S')})")
        print("")

if __name__ == "__main__":
    assistente_loop()

